import streamlit as st
import numpy as np
import pandas as pd
from scipy.optimize import minimize_scalar
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ü–æ–¥–±–æ—Ä –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∂–∞—Ä–æ–ø—Ä–æ—á–Ω–æ—Å—Ç–∏", layout="wide")
st.title("–ü–æ–¥–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ C –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∂–∞—Ä–æ–ø—Ä–æ—á–Ω–æ—Å—Ç–∏")

# === –ó–ê–ì–†–£–ó–ö–ê –ü–†–û–ï–ö–¢–ê ===
st.sidebar.subheader("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ / –∑–∞–≥—Ä—É–∑–∫–∞")
uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç (.json)", type=["json"])
if uploaded_file is not None:
    try:
        data_from_file = json.load(uploaded_file)
        st.session_state.data = data_from_file.get("data", [])
        st.session_state.model = data_from_file.get("model", "–õ–∞—Ä—Å–æ–Ω–∞‚Äì–ú–∏–ª–ª–µ—Ä–∞")
    except Exception as e:
        st.sidebar.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

# === –í–´–ë–û–† –ú–û–î–ï–õ–ò ===
model_options = ["–õ–∞—Ä—Å–æ–Ω–∞‚Äì–ú–∏–ª–ª–µ—Ä–∞", "–¢—Ä—É–Ω–∏–Ω–∞"]
if "model" not in st.session_state:
    st.session_state.model = model_options[0]

model = st.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –∂–∞—Ä–æ–ø—Ä–æ—á–Ω–æ—Å—Ç–∏:",
    model_options,
    index=model_options.index(st.session_state.model),
    key="model_radio"
)
st.session_state.model = model

# === –í–í–û–î –î–ê–ù–ù–´–• ===
st.subheader("–í–≤–µ–¥–∏—Ç–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
st.markdown("""
- **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞** –≤ –ö–µ–ª—å–≤–∏–Ω–∞—Ö (K)  
- **–í—Ä–µ–º—è –¥–æ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è** –≤ —á–∞—Å–∞—Ö (œÑ)  
- **–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ** –≤ –ú–ü–∞
""")

if "data" not in st.session_state:
    st.session_state.data = []

# –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
col_btn1, col_btn2, col_btn3 = st.columns(3)
if col_btn1.button("–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É"):
    st.session_state.data.append({"T": 1000.0, "tau": 1000.0, "sigma": 100.0})
if col_btn2.button("–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é"):
    if st.session_state.data:
        st.session_state.data.pop()
if col_btn3.button("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë"):
    st.session_state.data = []

# –¢–∞–±–ª–∏—Ü–∞ –≤–≤–æ–¥–∞
edited_data = []
for i, row in enumerate(st.session_state.data):
    cols = st.columns(3)
    T = cols[0].number_input(f"T (K) {i+1}", value=float(row["T"]), min_value=300.0, step=10.0, key=f"T_{i}")
    tau = cols[1].number_input(f"œÑ (—á) {i+1}", value=float(row["tau"]), min_value=1.0, step=10.0, key=f"tau_{i}")
    sigma = cols[2].number_input(f"œÉ (–ú–ü–∞) {i+1}", value=float(row["sigma"]), min_value=1.0, step=1.0, key=f"sigma_{i}")
    edited_data.append({"T": T, "tau": tau, "sigma": sigma})

st.session_state.data = edited_data

# === –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• ===
df = pd.DataFrame(st.session_state.data)
if df.empty or len(df) < 3:
    st.warning("–î–æ–±–∞–≤—å—Ç–µ –º–∏–Ω–∏–º—É–º 3 —Ç–æ—á–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    st.stop()

if (df <= 0).any().any():
    st.error("–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏!")
    st.stop()

# === –§–û–†–ú–£–õ–´ –ü–ê–†–ê–ú–ï–¢–†–û–í ===
def calc_lm(T, tau, C):
    """–ü–∞—Ä–∞–º–µ—Ç—Ä –õ–∞—Ä—Å–æ–Ω–∞‚Äì–ú–∏–ª–ª–µ—Ä–∞: P = T * (log10(tau) + C)"""
    return T * (np.log10(tau) + C)

def calc_trunin(T, tau, C):
    """–ü–∞—Ä–∞–º–µ—Ç—Ä –¢—Ä—É–Ω–∏–Ω–∞: P = T * (log10(tau) - 2*log10(T) + C)"""
    return T * (np.log10(tau) - 2 * np.log10(T) + C)

# === –§–£–ù–ö–¶–ò–Ø –û–¶–ï–ù–ö–ò –ö–ê–ß–ï–°–¢–í–ê ===
def objective(C, T, tau, sigma, model_func):
    P = model_func(T, tau, C)
    # –ò—Å–∫–ª—é—á–∞–µ–º NaN/inf
    if not np.all(np.isfinite(P)):
        return 1e6
    log_sigma = np.log10(sigma)
    reg = LinearRegression().fit(P.reshape(-1, 1), log_sigma)
    pred = reg.predict(P.reshape(-1, 1))
    r2 = r2_score(log_sigma, pred)
    return -r2  # –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π R¬≤

# === –í–´–ë–û–† –ú–û–î–ï–õ–ò –ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø ===
model_func = calc_trunin if model == "–¢—Ä—É–Ω–∏–Ω–∞" else calc_lm

# –î–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è C (—É—Ç–æ—á–Ω–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–∫—Ç–∏–∫–∏)
if model == "–õ–∞—Ä—Å–æ–Ω–∞‚Äì–ú–∏–ª–ª–µ—Ä–∞":
    C_bounds = (15, 25)
    formula_str = r"$P = T \cdot (\log_{10} \tau + C)$"
else:
    C_bounds = (5, 15)  # –ë–æ–ª–µ–µ —É–∑–∫–∏–π –∏ —Ñ–∏–∑–∏—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –¢—Ä—É–Ω–∏–Ω–∞
    formula_str = r"$P = T \cdot (\log_{10} \tau - 2 \log_{10} T + C)$"

T_vals = df["T"].values
tau_vals = df["tau"].values
sigma_vals = df["sigma"].values

res = minimize_scalar(
    objective,
    bounds=C_bounds,
    args=(T_vals, tau_vals, sigma_vals, model_func),
    method='bounded'
)

C_opt = res.x
P_opt = model_func(T_vals, tau_vals, C_opt)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
if not np.all(np.isfinite(P_opt)):
    st.error("–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ—Å–æ–±–µ–Ω–Ω–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏ –≤—Ä–µ–º—è).")
    st.stop()

log_sigma = np.log10(sigma_vals)
reg = LinearRegression().fit(P_opt.reshape(-1, 1), log_sigma)
r2 = r2_score(log_sigma, reg.predict(P_opt.reshape(-1, 1)))

# === –í–´–í–û–î –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===
st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–±–æ—Ä–∞")
st.markdown(f"**–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Ñ–æ—Ä–º—É–ª–∞:** {formula_str}")
col1, col2 = st.columns(2)
col1.metric("–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç C", f"{C_opt:.4f}")
col2.metric("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏ R¬≤", f"{r2:.4f}")

a, b = reg.coef_[0], reg.intercept_
st.markdown(f"**–£—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏:** $\\log_{{10}}(\\sigma) = {a:.4f} \\cdot P + {b:.4f}$")

# === –ì–†–ê–§–ò–ö ===
st.subheader("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∂–∞—Ä–æ–ø—Ä–æ—á–Ω–æ—Å—Ç–∏")
fig, ax = plt.subplots(figsize=(8, 5))
ax.scatter(P_opt, sigma_vals, color='red', label='–î–∞–Ω–Ω—ã–µ')
P_fit = np.linspace(P_opt.min(), P_opt.max(), 200)
sigma_fit = 10 ** (a * P_fit + b)
ax.plot(P_fit, sigma_fit, 'b--', label='–ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è')
ax.set_xlabel("–ü–∞—Ä–∞–º–µ—Ç—Ä –∂–∞—Ä–æ–ø—Ä–æ—á–Ω–æ—Å—Ç–∏ P")
ax.set_ylabel("–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –ú–ü–∞")
ax.set_yscale('log')
ax.grid(True, which="both", ls="--", alpha=0.6)
ax.legend()
st.pyplot(fig)

# === –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===
st.subheader("–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
df_res = df.copy()
df_res["P"] = P_opt
df_res["log10(œÉ)"] = log_sigma
st.dataframe(df_res.round(4))

# === –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–†–û–ï–ö–¢–ê ===
st.sidebar.markdown("---")
st.sidebar.subheader("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
project_data = {
    "model": st.session_state.model,
    "data": st.session_state.data
}
json_str = json.dumps(project_data, indent=2)
st.sidebar.download_button(
    label="üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–µ–∫—Ç (.json)",
    data=json_str,
    file_name="creep_project.json",
    mime="application/json"
)
