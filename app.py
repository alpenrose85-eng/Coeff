import streamlit as st
import numpy as np
import pandas as pd
from scipy.optimize import minimize_scalar
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt
import json
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∂–∞—Ä–æ–ø—Ä–æ—á–Ω–æ—Å—Ç–∏", layout="wide")
st.title("–ü–æ–¥–±–æ—Ä –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ C –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∂–∞—Ä–æ–ø—Ä–æ—á–Ω–æ—Å—Ç–∏")

# === –ó–ê–ì–†–£–ó–ö–ê –ü–†–û–ï–ö–¢–ê (JSON) ===
st.sidebar.subheader("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ / –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞")
uploaded_project = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç (.json)", type=["json"])
if uploaded_project is not None:
    try:
        data_from_file = json.load(uploaded_project)
        st.session_state.data = data_from_file.get("data", [])
        st.session_state.model = data_from_file.get("model", "–õ–∞—Ä—Å–æ–Ω–∞‚Äì–ú–∏–ª–ª–µ—Ä–∞")
    except Exception as e:
        st.sidebar.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")

# === –í–´–ë–û–† –ú–û–î–ï–õ–ò ===
model_options = ["–õ–∞—Ä—Å–æ–Ω–∞‚Äì–ú–∏–ª–ª–µ—Ä–∞", "–¢—Ä—É–Ω–∏–Ω–∞"]
if "model" not in st.session_state:
    st.session_state.model = model_options[0]

model = st.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –∂–∞—Ä–æ–ø—Ä–æ—á–Ω–æ—Å—Ç–∏:",
    model_options,
    index=model_options.index(st.session_state.model),
    key="model_radio"
)
st.session_state.model = model

# === –ú–ê–°–°–û–í–´–ô –í–í–û–î –î–ê–ù–ù–´–• ===
st.subheader("–ú–∞—Å—Å–æ–≤—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")

# –í–∞—Ä–∏–∞–Ω—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
st.markdown("### üìé –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª")
uploaded_file = st.file_uploader(
    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .xlsx, .xls, .csv",
    type=["xlsx", "xls", "csv"]
)

# –í–∞—Ä–∏–∞–Ω—Ç 2: –í—Å—Ç–∞–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
st.markdown("### üìã –ò–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel / Word")
st.markdown("""
–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —è—á–µ–µ–∫ (—Å—Ç–æ–ª–±—Ü—ã: **T (¬∞C)**, **tau (—á)**, **sigma (–ú–ü–∞)**) –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –Ω–∏–∂–µ.  
–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏: **—Ç–∞–±—É–ª—è—Ü–∏—è, –∑–∞–ø—è—Ç–∞—è, –ø—Ä–æ–±–µ–ª –∏–ª–∏ —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π**.
""")

pasted_data = st.text_area(
    "–í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: T_C, tau, sigma)",
    height=200,
    placeholder="T_C\tau\tsigma\n727\t1000\t120\n800\t500\t150"
)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df_input = None

# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ñ–∞–π–ª > –≤—Å—Ç–∞–≤–∫–∞ > —Å–µ—Å—Å–∏—è
if uploaded_file is not None:
    try:
        if uploaded_file.name.endswith(('.xlsx', '.xls')):
            df_input = pd.read_excel(uploaded_file)
        elif uploaded_file.name.endswith('.csv'):
            df_input = pd.read_csv(uploaded_file)
        st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df_input)} —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞.")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

elif pasted_data.strip():
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        sample = pasted_data.split('\n')[0]
        if '\t' in sample:
            sep = '\t'
        elif ';' in sample:
            sep = ';'
        elif ',' in sample:
            sep = ','
        else:
            sep = None  # –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ —Å–º–µ—à–∞–Ω–Ω—ã–µ ‚Äî pandas –ø–æ–ø—Ä–æ–±—É–µ—Ç —Å–∞–º

        from io import StringIO
        df_input = pd.read_csv(StringIO(pasted_data), sep=sep)
        st.success(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ {len(df_input)} —Å—Ç—Ä–æ–∫ –∏–∑ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
if df_input is not None:
    # –ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É
    col_map = {}
    for col in df_input.columns:
        col_lower = col.strip().lower()
        if col_lower in ["t", "t_c", "temperature", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "t (¬∞c)", "t(c)"]:
            col_map[col] = "T_C"
        elif col_lower in ["tau", "t_r", "–≤—Ä–µ–º—è", "time", "œÑ", "tau (h)", "tau (—á)"]:
            col_map[col] = "tau"
        elif col_lower in ["sigma", "–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ", "stress", "œÉ", "sigma (mpa)", "sigma (–º–ø–∞)"]:
            col_map[col] = "sigma"
    
    df_input = df_input.rename(columns=col_map)
    
    required_cols = {"T_C", "tau", "sigma"}
    if not required_cols.issubset(df_input.columns):
        missing = required_cols - set(df_input.columns)
        st.error(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ç–æ–ª–±—Ü–æ–≤: {missing}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –µ—Å—Ç—å T_C, tau, sigma.")
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        st.session_state.data = df_input[["T_C", "tau", "sigma"]].to_dict('records')

# === –†–£–ß–ù–û–ô –í–í–û–î (–æ—Å—Ç–∞–≤–∏–º –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –ø—Ä–∞–≤–æ–∫) ===
st.markdown("---")
st.subheader("–†—É—á–Ω–æ–π –≤–≤–æ–¥ (–¥–ª—è –ø—Ä–∞–≤–∫–∏)")

if "data" not in st.session_state:
    st.session_state.data = []

# –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
col_btn1, col_btn2, col_btn3 = st.columns(3)
if col_btn1.button("–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É"):
    st.session_state.data.append({"T_C": 727.0, "tau": 1000.0, "sigma": 100.0})
if col_btn2.button("–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é"):
    if st.session_state.
        st.session_state.data.pop()
if col_btn3.button("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë"):
    st.session_state.data = []

# –¢–∞–±–ª–∏—Ü–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
edited_data = []
for i, row in enumerate(st.session_state.data):
    cols = st.columns(3)
    T_C = cols[0].number_input(f"T (¬∞C) {i+1}", value=float(row["T_C"]), min_value=100.0, max_value=1500.0, step=10.0, key=f"T_C_{i}")
    tau = cols[1].number_input(f"œÑ (—á) {i+1}", value=float(row["tau"]), min_value=1.0, step=10.0, key=f"tau_{i}")
    sigma = cols[2].number_input(f"œÉ (–ú–ü–∞) {i+1}", value=float(row["sigma"]), min_value=1.0, step=1.0, key=f"sigma_{i}")
    edited_data.append({"T_C": T_C, "tau": tau, "sigma": sigma})

st.session_state.data = edited_data

# === –ü–†–û–í–ï–†–ö–ê –ò –†–ê–°–ß–Å–¢ ===
df = pd.DataFrame(st.session_state.data)
if df.empty or len(df) < 3:
    st.warning("–î–æ–±–∞–≤—å—Ç–µ –º–∏–Ω–∏–º—É–º 3 —Ç–æ—á–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    st.stop()

if (df["tau"] <= 0).any() or (df["sigma"] <= 0).any():
    st.error("–í—Ä–µ–º—è –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏!")
    st.stop()

df["T_K"] = df["T_C"] + 273.15

# === –§–£–ù–ö–¶–ò–ò –ü–ê–†–ê–ú–ï–¢–†–û–í ===
def calc_lm(T_K, tau, C):
    return T_K * (np.log10(tau) + C)

def calc_trunin(T_K, tau, C):
    return T_K * (np.log10(tau) - 2 * np.log10(T_K) + C)

def objective(C, T_K, tau, sigma, model_func):
    P = model_func(T_K, tau, C)
    if not np.all(np.isfinite(P)):
        return 1e6
    log_sigma = np.log10(sigma)
    reg = LinearRegression().fit(P.reshape(-1, 1), log_sigma)
    r2 = r2_score(log_sigma, reg.predict(P.reshape(-1, 1)))
    return -r2

# === –í–´–ë–û–† –ú–û–î–ï–õ–ò ===
model_func = calc_trunin if model == "–¢—Ä—É–Ω–∏–Ω–∞" else calc_lm
if model == "–õ–∞—Ä—Å–æ–Ω–∞‚Äì–ú–∏–ª–ª–µ—Ä–∞":
    C_bounds = (15, 25)
    formula_str = r"$P_{\text{–õ–ú}} = T \cdot (\log_{10} \tau + C)$"
else:
    C_bounds = (5, 15)
    formula_str = r"$P_{\text{—Ç—Ä}} = T \cdot (\log_{10} \tau - 2 \log_{10} T + C)$"

T_K_vals = df["T_K"].values
tau_vals = df["tau"].values
sigma_vals = df["sigma"].values

res = minimize_scalar(objective, bounds=C_bounds, args=(T_K_vals, tau_vals, sigma_vals, model_func), method='bounded')
C_opt = res.x
P_opt = model_func(T_K_vals, tau_vals, C_opt)

if not np.all(np.isfinite(P_opt)):
    st.error("–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
    st.stop()

log_sigma = np.log10(sigma_vals)
reg = LinearRegression().fit(P_opt.reshape(-1, 1), log_sigma)
r2 = r2_score(log_sigma, reg.predict(P_opt.reshape(-1, 1)))
a, b = reg.coef_[0], reg.intercept_

# === –í–´–í–û–î ===
st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–±–æ—Ä–∞")
st.markdown(f"**–§–æ—Ä–º—É–ª–∞:** {formula_str}")
st.markdown("> T ‚Äî —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ö–µ–ª—å–≤–∏–Ω–∞—Ö (T = T¬∞C + 273.15)")

col1, col2 = st.columns(2)
col1.metric("C", f"{C_opt:.4f}")
col2.metric("R¬≤", f"{r2:.4f}")

st.markdown(f"**–†–µ–≥—Ä–µ—Å—Å–∏—è:** $\\log_{{10}}(\\sigma) = {a:.4f} \\cdot P + {b:.4f}$")

# –ì—Ä–∞—Ñ–∏–∫
st.subheader("–ì—Ä–∞—Ñ–∏–∫")
fig, ax = plt.subplots(figsize=(8, 5))
ax.scatter(P_opt, sigma_vals, color='red', label='–î–∞–Ω–Ω—ã–µ')
P_fit = np.linspace(P_opt.min(), P_opt.max(), 200)
sigma_fit = 10 ** (a * P_fit + b)
ax.plot(P_fit, sigma_fit, 'b--', label='–ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è')
ax.set_xlabel("–ü–∞—Ä–∞–º–µ—Ç—Ä P")
ax.set_ylabel("–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –ú–ü–∞")
ax.set_yscale('log')
ax.grid(True, which="both", ls="--", alpha=0.6)
ax.legend()
st.pyplot(fig)

# –¢–∞–±–ª–∏—Ü–∞
st.subheader("–î–∞–Ω–Ω—ã–µ")
df_display = df[["T_C", "tau", "sigma"]].copy()
df_display["T (K)"] = df["T_K"]
df_display["P"] = P_opt
df_display["log10(œÉ)"] = log_sigma
df_display = df_display.rename(columns={"T_C": "T (¬∞C)"})
st.dataframe(df_display.round(4))

# === –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–†–û–ï–ö–¢–ê ===
st.sidebar.markdown("---")
st.sidebar.subheader("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
project_data = {
    "model": st.session_state.model,
    "data": st.session_state.data
}
json_str = json.dumps(project_data, indent=2)
st.sidebar.download_button(
    label="üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–µ–∫—Ç (.json)",
    data=json_str,
    file_name="creep_project.json",
    mime="application/json"
)
