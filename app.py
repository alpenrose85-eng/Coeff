import streamlit as st
import numpy as np
import pandas as pd
from scipy.optimize import minimize_scalar
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt
import json
from io import StringIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∂–∞—Ä–æ–ø—Ä–æ—á–Ω–æ—Å—Ç–∏", layout="wide")
st.title("–ü–æ–¥–±–æ—Ä –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ C –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∂–∞—Ä–æ–ø—Ä–æ—á–Ω–æ—Å—Ç–∏")

# === –ó–ê–ì–†–£–ó–ö–ê –ü–†–û–ï–ö–¢–ê (JSON) ===
st.sidebar.subheader("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ / –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞")
uploaded_project = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç (.json)", type=["json"])
if uploaded_project is not None:
    try:
        data_from_file = json.load(uploaded_project)
        st.session_state.data = data_from_file.get("data", [])
        st.session_state.model = data_from_file.get("model", "–õ–∞—Ä—Å–æ–Ω–∞‚Äì–ú–∏–ª–ª–µ—Ä–∞")
    except Exception as e:
        st.sidebar.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")

# === –í–´–ë–û–† –ú–û–î–ï–õ–ò ===
model_options = ["–õ–∞—Ä—Å–æ–Ω–∞‚Äì–ú–∏–ª–ª–µ—Ä–∞", "–¢—Ä—É–Ω–∏–Ω–∞"]
if "model" not in st.session_state:
    st.session_state.model = model_options[0]

model = st.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –∂–∞—Ä–æ–ø—Ä–æ—á–Ω–æ—Å—Ç–∏:",
    model_options,
    index=model_options.index(st.session_state.model),
    key="model_radio"
)
st.session_state.model = model

# === –ú–ê–°–°–û–í–´–ô –í–í–û–î –î–ê–ù–ù–´–• ===
st.subheader("–ú–∞—Å—Å–æ–≤—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")

# –í–∞—Ä–∏–∞–Ω—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
st.markdown("### üìé –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª")
uploaded_file = st.file_uploader(
    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .xlsx, .xls, .csv",
    type=["xlsx", "xls", "csv"]
)

# –í–∞—Ä–∏–∞–Ω—Ç 2: –í—Å—Ç–∞–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
st.markdown("### üìã –ò–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel / Word")
st.markdown("""
–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —è—á–µ–µ–∫ –∏–∑ Excel –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –Ω–∏–∂–µ.  
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è **–∑–∞–ø—è—Ç—ã–µ –∫–∞–∫ –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å** (–Ω–∞–ø—Ä–∏–º–µ—Ä: `44,1`).  
–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Å—Ç–æ–ª–±—Ü–∞–º–∏ ‚Äî **–ø—Ä–æ–±–µ–ª—ã** (–∫–∞–∫ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑ Excel).
""")

pasted_data = st.text_area(
    "–í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞: T(¬∞C) œÑ(—á) œÉ(–ú–ü–∞))",
    height=200,
    placeholder="675 44,1 537\n650 49,2 1676\n594 60 4182"
)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df_input = None

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ ‚Äî –ë–ï–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –ó–ê–ì–û–õ–û–í–ö–û–í
if uploaded_file is not None:
    try:
        if uploaded_file.name.endswith(('.xlsx', '.xls')):
            df_raw = pd.read_excel(uploaded_file, header=None)
        elif uploaded_file.name.endswith('.csv'):
            try:
                df_raw = pd.read_csv(uploaded_file, header=None)
            except:
                uploaded_file.seek(0)
                df_raw = pd.read_csv(uploaded_file, decimal=',', sep=';', header=None)
        else:
            st.error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.")
            df_raw = None

        if df_raw is not None:
            df_raw.dropna(how='all', inplace=True)
            if df_raw.empty or df_raw.shape[1] < 3:
                st.error("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å—Ç–æ–ª–±—Ü–∞.")
                df_input = None
            else:
                df_input = df_raw.iloc[:, :3].copy()
                df_input.columns = ["T_C", "tau", "sigma"]
                st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df_input)} —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞.")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

# –í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–∞–ø—è—Ç—ã—Ö
elif pasted_data.strip():
    try:
        cleaned_data = pasted_data.replace(",", ".")
        lines = [line.strip() for line in cleaned_data.splitlines() if line.strip()]
        
        if not lines:
            st.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            df_input = None
        else:
            data_list = []
            for i, line in enumerate(lines):
                parts = [p for p in line.split() if p]
                if len(parts) == 3:
                    data_list.append(parts)
                elif len(parts) == 1 and len(line) >= 6:
                    s = line
                    t_c = s[:3] if len(s) >= 3 else ""
                    tau = s[3:6] if len(s) >= 6 else ""
                    sigma = s[6:] if len(s) > 6 else ""
                    if t_c and tau and sigma:
                        data_list.append([t_c, tau, sigma])
                    else:
                        st.warning(f"–°—Ç—Ä–æ–∫–∞ {i+1}: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å '{s}'")
                else:
                    st.warning(f"–°—Ç—Ä–æ–∫–∞ {i+1}: –Ω–µ 3 —Å—Ç–æ–ª–±—Ü–∞ ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–∞")

            if not data_list:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å 3 —Å—Ç–æ–ª–±—Ü–∞–º–∏.")
                df_input = None
            else:
                df_input = pd.DataFrame(data_list, columns=["T_C", "tau", "sigma"])
                st.success(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ {len(df_input)} —Å—Ç—Ä–æ–∫ –∏–∑ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Å—Å–∏—é
if df_input is not None:
    records = []
    for _, row in df_input.iterrows():
        try:
            t_c = float(row["T_C"])
            tau_val = float(row["tau"])
            sigma_val = float(row["sigma"])
            if t_c < -50 or t_c > 2500:
                st.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {t_c} ¬∞C")
                continue
            if tau_val <= 0 or tau_val > 1e6:
                st.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {tau_val} —á")
                continue
            if sigma_val <= 0 or sigma_val > 2000:
                st.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ: {sigma_val} –ú–ü–∞")
                continue
            records.append({"T_C": t_c, "tau": tau_val, "sigma": sigma_val})
        except (ValueError, TypeError):
            st.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {row.to_dict()}")
            continue
    st.session_state.data = records

# === –†–£–ß–ù–û–ô –í–í–û–î ===
st.markdown("---")
st.subheader("–†—É—á–Ω–æ–π –≤–≤–æ–¥ (–¥–ª—è –ø—Ä–∞–≤–∫–∏)")

if "data" not in st.session_state:
    st.session_state.data = []

col_btn1, col_btn2, col_btn3 = st.columns(3)
if col_btn1.button("–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É"):
    st.session_state.data.append({"T_C": 727.0, "tau": 1000.0, "sigma": 100.0})
if col_btn2.button("–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é"):
    if len(st.session_state.data) > 0:
        st.session_state.data.pop()
if col_btn3.button("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë"):
    st.session_state.data = []

edited_data = []
for i, row in enumerate(st.session_state.data):
    cols = st.columns(3)
    T_C = cols[0].number_input(f"T (¬∞C) {i+1}", value=float(row["T_C"]), step=10.0, key=f"T_C_{i}")
    tau = cols[1].number_input(f"œÑ (—á) {i+1}", value=float(row["tau"]), step=100.0, key=f"tau_{i}")
    sigma = cols[2].number_input(f"œÉ (–ú–ü–∞) {i+1}", value=float(row["sigma"]), step=1.0, key=f"sigma_{i}")
    edited_data.append({"T_C": T_C, "tau": tau, "sigma": sigma})

st.session_state.data = edited_data

# === –ü–†–û–í–ï–†–ö–ê –ò –†–ê–°–ß–Å–¢ ===
df = pd.DataFrame(st.session_state.data)
if df.empty or len(df) < 3:
    st.warning("–î–æ–±–∞–≤—å—Ç–µ –º–∏–Ω–∏–º—É–º 3 —Ç–æ—á–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    st.stop()

if (df["tau"] <= 0).any() or (df["sigma"] <= 0).any():
    st.error("–í—Ä–µ–º—è –¥–æ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏!")
    st.stop()

df["T_K"] = df["T_C"] + 273.15

# === –§–£–ù–ö–¶–ò–ò –ü–ê–†–ê–ú–ï–¢–†–û–í ===
def calc_lm(T_K, tau, C):
    return T_K * (np.log10(tau) + C)

def calc_trunin(T_K, tau, C):
    return T_K * (np.log10(tau) - 2 * np.log10(T_K) + C)

def objective(C, T_K, tau, sigma, model_func):
    P = model_func(T_K, tau, C)
    if not np.all(np.isfinite(P)):
        return 1e6
    log_sigma = np.log10(sigma)
    reg = LinearRegression().fit(P.reshape(-1, 1), log_sigma)
    r2 = r2_score(log_sigma, reg.predict(P.reshape(-1, 1)))
    return -r2

# === –í–´–ë–û–† –ú–û–î–ï–õ–ò ===
model_func = calc_trunin if model == "–¢—Ä—É–Ω–∏–Ω–∞" else calc_lm
if model == "–õ–∞—Ä—Å–æ–Ω–∞‚Äì–ú–∏–ª–ª–µ—Ä–∞":
    C_bounds = (15, 25)
    formula_str = r"$P_{\text{–õ–ú}} = T \cdot (\log_{10} \tau + C)$"
else:
    C_bounds = (5, 15)
    formula_str = r"$P_{\text{—Ç—Ä}} = T \cdot (\log_{10} \tau - 2 \log_{10} T + C)$"

T_K_vals = df["T_K"].values
tau_vals = df["tau"].values
sigma_vals = df["sigma"].values

res = minimize_scalar(objective, bounds=C_bounds, args=(T_K_vals, tau_vals, sigma_vals, model_func), method='bounded')
C_opt = res.x
P_opt = model_func(T_K_vals, tau_vals, C_opt)

if not np.all(np.isfinite(P_opt)):
    st.error("–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
    st.stop()

log_sigma = np.log10(sigma_vals)
reg = LinearRegression().fit(P_opt.reshape(-1, 1), log_sigma)
r2 = r2_score(log_sigma, reg.predict(P_opt.reshape(-1, 1)))
a, b = reg.coef_[0], reg.intercept_

# === –í–´–í–û–î –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===
st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–±–æ—Ä–∞")
st.markdown(f"**–§–æ—Ä–º—É–ª–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:** {formula_str}")
st.markdown("> T ‚Äî —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ö–µ–ª—å–≤–∏–Ω–∞—Ö (T = T¬∞C + 273.15)")

col1, col2 = st.columns(2)
col1.metric("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç C", f"{C_opt:.4f}")
col2.metric("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏ R¬≤", f"{r2:.4f}")

st.markdown("**–£—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ—á–Ω–æ—Å—Ç–∏:**")
st.markdown(f"$$ \\sigma = 10^{{ {a:.4f} \\cdot P + {b:.4f} }} \\quad \\text{{(–ú–ü–∞)}} $$")
st.markdown(f"–∏–ª–∏ –≤ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º–µ:")
st.markdown(f"$$ \\log_{{10}}(\\sigma) = {a:.4f} \\cdot P + {b:.4f} $$")

# === –ì–†–ê–§–ò–ö (–≠–ö–°–ü–û–ù–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –ó–ê–í–ò–°–ò–ú–û–°–¢–¨) ===
st.subheader("–ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∂–∞—Ä–æ–ø—Ä–æ—á–Ω–æ—Å—Ç–∏")
fig, ax = plt.subplots(figsize=(8, 5))
ax.scatter(P_opt, sigma_vals, color='red', label='–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')

P_fit = np.linspace(P_opt.min(), P_opt.max(), 200)
sigma_fit = 10 ** (a * P_fit + b)  # –≠–ö–°–ü–û–ù–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –ö–†–ò–í–ê–Ø
ax.plot(P_fit, sigma_fit, 'b-', linewidth=2, label='–ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è')

ax.set_xlabel("–ü–∞—Ä–∞–º–µ—Ç—Ä –∂–∞—Ä–æ–ø—Ä–æ—á–Ω–æ—Å—Ç–∏ P")
ax.set_ylabel("–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –ú–ü–∞")
ax.set_yscale('log')
ax.grid(True, which="both", ls="--", alpha=0.6)
ax.legend()
st.pyplot(fig)

# === –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===
st.subheader("–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
df_display = df[["T_C", "tau", "sigma"]].copy()
df_display["T (K)"] = df["T_K"]
df_display["P"] = P_opt
df_display["log10(œÉ)"] = log_sigma
df_display = df_display.rename(columns={"T_C": "T (¬∞C)"})
st.dataframe(df_display.round(4))

# === –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–†–û–ï–ö–¢–ê ===
st.sidebar.markdown("---")
st.sidebar.subheader("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
project_data = {
    "model": st.session_state.model,
    "data": st.session_state.data
}
json_str = json.dumps(project_data, indent=2)
st.sidebar.download_button(
    label="üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–µ–∫—Ç (.json)",
    data=json_str,
    file_name="creep_project.json",
    mime="application/json"
)
